relaystate  : target service url
auth_one    : https://a5.ucsd.edu/tritON/profile/SAML2/Redirect/SSO?execution=e1s1
duo         : https://api-ce13a1a7.duosecurity.com/frame/web/v1/auth?tx=[value here changes]
prompt      : https://api-ce13a1a7.duosecurity.com/frame/prompt
status      : https://api-ce13a1a7.duosecurity.com/frame/status
result      : https://api-ce13a1a7.duosecurity.com/frame/status/[value here changes]
auth_two    : https://a5.ucsd.edu/tritON/profile/SAML2/Redirect/SSO?execution=e1s2
shibboleth  : https://act.ucsd.edu/Shibboleth.sso/SAML2/POST

list        : https://act.ucsd.edu/studentDarsSelfservice/audit/list.html
create      : https://act.ucsd.edu/studentDarsSelfservice/audit/create.html
reload      : https://act.ucsd.edu/studentDarsSelfservice/audit/list.html?autoPoll=true
read        : https://act.ucsd.edu/studentDarsSelfservice/audit/read.html?id=JobQueueRun!!!![value here changes]

Login Process
-------------
1) GET  [relaystate]    --<redirect>->  GET [auth_one]

2) POST [auth_one]      --<redirect>->  GET [auth_two]
   w/ { 
       'urn:mace:ucsd.edu:sso:username'; 
       'urn:mace:ucsd.edu:sso:password'};
   a) response data used to construct [duo]

3) POST [duo]           --<redirect>->  GET [prompt w/ sid]
   w/ {
       'tx';
       'parent';
       'referer'};
   a) redirected to url w/ sid encoded as query param
   b) sid decoded and sent as part of data POSTed to [prompt]

4) POST [prompt]
   w/ {
       'sid';
       'device';
       'factor';
       'dampen_choice';
       'out_of_date';
       'days_out_of_date';
       'days_to_block'};
   a) response data contains txid

5) POST [status]
   w/ {
       'sid';
       'txid'};
   a) first POST response only contains a status message

6) POST [status]
   w/ [same data as above]
   a) second POST waits on user to respond to push notif (until timeout)
   b) response contains [result] url to make the next POST to

7) POST [result]
   w/ {'sid'}
   a) response contains <AUTH> portion of sig_response
   b) also contains url encoded [auth_two] but we already have the original (from auth_one redirect)

8) POST [auth_two]
   w/ {
       '_eventId';
       'sig_response'};
   a) response contains SAMLResponse
   b) also contains partially hex encoded [relaystate] but we already have the original

9) POST [shibboleth]    --<redirect>->  GET [relaystate w/ crossApp]
   w/ {
       'RelayState';
       'SAMLResponse};
   a) crossApp string unknown for now seems like an encrypted value like SAMLResponse
   b) This is the end of the login process!

Generate Audit Process
----------------------
1) GET  [list]
   a) primitive string selection used to find the first instance of read.html
   b) first instance is latest created audit

2) POST [create]        --<redirect>->  GET [reload]
   w/ {
       'includeInProgressCourses';
       'includePlannedCourses';
       'sysIn.velsw';
       'auditTemplate';
       'sysIn.fdpmask';
       'useDefaultDegreePrograms';
       'pageRefresh'};
   a) preset data POSTed will generate a request for a new audit
   b) redirected to the [list w/ autoPoll=true] aka [reload] url

3) GET  [reload]
   a) loop reading the first instane of read for latest audit, wait, and GET again
   b) continue looping until new [read] url for audit is retrieved
        i) this works for both empty and nonempty starting lists

4) GET  [read]
   a) finally can get a copy of the audit page 
   b) stored in a local file called 'audit.html' for future parsing

